.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

stages:
  - style
  - build
  - test
  - package
  - deploy

# style
style:c:
  image: debian:stable
  stage: style
  before_script:
    - apt-get update
    - apt-get install -y clang-format git
  script:
    - clang-format -i src/* include/*
    - git diff --exit-code

style:python:
  image: python:3.6
  stage: style
  before_script:
    - pip install tox
  script:
    - cd wrappers/python
    - tox -vv
  variables:
    TOXENV: flake8,black

# build
build:linux:
  image: quay.io/pypa/manylinux2010_x86_64
  stage: build
  # We need CMake 3.14+. To get it we just use the Python manylinux wheel of
  # it, because (1) we know it is compatible and (2) is easier/faster than
  # compiling it ourselves.
  before_script:
   - /opt/python/cp36-cp36m/bin/pip install cmake
  script:
    - mkdir build
    - cd build
    - /opt/python/cp36-cp36m/bin/cmake -DUSE_FAST_MATH=ON -DUSE_FAST_TANH=ON -DCMAKE_INSTALL_PREFIX=../dist -DCMAKE_BUILD_TYPE=Release ..
    - make -j4 install
    - cd ../wrappers/python
    - /opt/python/cp36-cp36m/bin/python setup.py build_ext --library-dirs=../../dist/lib --include-dirs=../../include bdist_wheel --py-limited-api=cp36
    - auditwheel repair dist/*
  variables:
    CC: gcc
    CXX: g++
  artifacts:
    expire_in: 2 hrs
    paths:
      - dist/
      - wrappers/python/wheelhouse/

build:windows:
  stage: build
  before_script:
    - choco install cmake -y
    # Chocolatey does not offer maintained 32-bits versions of Python, so we
    # install both 32- and 64-bit versions manually.
    - 'wget.exe https://www.python.org/ftp/python/3.6.8/python-3.6.8.exe'
    - 'Start-Process -Wait ".\python-3.6.8.exe" -ArgumentList "/quiet TargetDir=C:\Python36-32 InstallAllUsers=1 Include_launcher=0 Include_doc=0 Include_tcltk=0 Include_test=0"'
    - 'wget.exe https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe'
    - 'Start-Process -Wait ".\python-3.6.8-amd64.exe" -ArgumentList "/quiet TargetDir=C:\Python36-64 InstallAllUsers=1 Include_launcher=0 Include_doc=0 Include_tcltk=0 Include_test=0"'
  script:
    # Build both 32-bit and 64-bit versions
    - '& "C:\\Program Files\\CMake\\bin\\cmake.exe" -G "Visual Studio 16 2019" -A Win32 -S . -B "build32" -DUSE_FAST_MATH=ON -DUSE_FAST_TANH=ON -DCMAKE_INSTALL_PREFIX:FILEPATH=../dist32'
    - '& "C:\\Program Files\\CMake\\bin\\cmake.exe" --build build32 --config Release --target Install'
    - '& "C:\\Program Files\\CMake\\bin\\cmake.exe" -G "Visual Studio 16 2019" -A x64 -S . -B "build64" -DUSE_FAST_MATH=ON -DUSE_FAST_TANH=ON -DCMAKE_INSTALL_PREFIX:FILEPATH=../dist64'
    - '& "C:\\Program Files\\CMake\\bin\\cmake.exe" --build build64 --config Release --target Install'
    - cd wrappers/python
    - '& "C:\Python36-32\python.exe" -m pip install wheel>=0.35.0'
    - '& "C:\Python36-32\python.exe" setup.py build_ext --library-dirs=../../dist32/lib --include-dirs=../../include bdist_wheel --py-limited-api=cp36'
    - '& "C:\Python36-64\python.exe" -m pip install wheel>=0.35.0'
    - '& "C:\Python36-64\python.exe" setup.py build_ext --library-dirs=../../dist64/lib --include-dirs=../../include bdist_wheel --py-limited-api=cp36'
  extends:
    - .shared_windows_runners
  artifacts:
    expire_in: 2 hrs
    paths:
      - dist32/
      - dist64/
      - wrappers/python/dist/

# test
.job_template: &unittests
  stage: test
  before_script:
    - pip install tox
  script:
    - cd wrappers/python
    - tox -vv --installpkg wheelhouse/*.whl
  needs: ["build:linux"]

test:py36:linux:
  <<: *unittests
  image: python:3.6
  variables:
    TOXENV: py36

test:py37:linux:
  <<: *unittests
  image: python:3.7
  variables:
    TOXENV: py37

test:py38:linux:
  <<: *unittests
  image: python:3.8
  variables:
    TOXENV: py38

# package
package:
  image: debian:stable
  stage: package
  before_script:
    - apt-get update
    - apt-get install -y zip
  script:
    # Prepare
    - mkdir package package/pyzsf package/excel package/libraries
    # Libraries
    - cd dist64; zip -r ../package/libraries/libzsf-windows-amd64.zip *; cd ..
    - cd dist32; zip -r ../package/libraries/libzsf-windows-386.zip *; cd ..
    - cd dist; tar -czf ../package/libraries/libzsf-linux-amd64.tar.gz *; cd ..
    # Python
    - cp -R wrappers/python/dist/* package/pyzsf
    - cp -R wrappers/python/wheelhouse/* package/pyzsf
    # Excel
    - zip -j package/excel/zsf-excel.zip dist64/bin/zsf.dll dist32/bin/zsf-stdcall.dll wrappers/excel/zsf.xlsm
  artifacts:
    expire_in: 2 hrs
    paths:
      - package/

# deploy
.job_template: &deployrelease
  image: python:3.6
  stage: deploy
  only:
    # Only deploy refs that start with "v"
    - /^v.*$/
  except:
    # If a branch happens to start with "v", skip it as we only want to
    # deploy tags.
    - branches

deploy:s3-gitlab:
  <<: *deployrelease
  before_script:
    - pip install awscli
  variables:
    AWS_DEFAULT_REGION: eu-central-1
    BUCKET_NAME: deltares-zsf-downloads
  script:
    - aws s3 cp package s3://${BUCKET_NAME}/${CI_COMMIT_TAG} --recursive
    # The python files contain the tags, that may or may not be normalized.
    # We grep the files we have to be sure we have the correct filename
    - cd package/pyzsf
    - fname_pyzsf_linux=$(ls | grep -m1 "manylinux.*.whl")
    - fname_pyzsf_win32=$(ls | grep -m1 "win32.whl")
    - fname_pyzsf_amd64=$(ls | grep -m1 "win_amd64.whl")
    - cd ../..
    # Release to GitLab
    - s3="https://${BUCKET_NAME}.s3.${AWS_DEFAULT_REGION}.amazonaws.com/${CI_COMMIT_TAG}"
    - |
      release=$(cat <<EOS
      {
        "name": "${CI_COMMIT_TAG}",
        "tag_name": "${CI_COMMIT_TAG}",
        "description": "",
        "assets": {
          "links": [
            { "name": "Excel Workbook",
              "url": "$s3/excel/zsf-excel.zip" },
            { "name": "Python wheel - linux amd64",
              "url": "$s3/pyzsf/$fname_pyzsf_linux" },
            { "name": "Python wheel - Windows 64 bits",
              "url": "$s3/pyzsf/$fname_pyzsf_amd64" },
            { "name": "Python wheel - Windows 32 bits",
              "url": "$s3/pyzsf/$fname_pyzsf_win32" },
            { "name": "Libraries - linux amd64",
              "url": "$s3/libraries/libzsf-linux-amd64.tar.gz" },
            { "name": "Libraries - Windows 64 bits",
              "url": "$s3/libraries/libzsf-windows-amd64.zip" },
            { "name": "Libraries - Windows 32 bits",
              "url": "$s3/libraries/libzsf-windows-386.zip" }
          ]
        }
      }
      EOS
      )
    - echo $release
    - 'curl -f --header "Content-Type: application/json" --header "PRIVATE-TOKEN: $DEPLOY_TOKEN" --data "$release" --request POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"'

deploy:pypi:
  <<: *deployrelease
  script:
    - pip install twine
    - twine upload -u __token__ -p $PYPI_TOKEN package/pyzsf/*
